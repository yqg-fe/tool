{"version":3,"file":null,"sources":["../src/JsonTool/JsonDiffPatcher.js","../src/JsonTool/JsonTool.js","../src/main.js"],"sourcesContent":["/**\n * @author zhangpeng\n * @date 16/7/25-下午8:13\n * @file JsonDiffPatcher\n */\n\nimport jsondiffpatch from 'jsondiffpatch';\nexport default jsondiffpatch.create({\n    objectHash: (obj) => (obj.id || JSON.stringify(obj))\n});\n","/**\n * @author zhangpeng\n * @date 16/7/25-下午5:55\n * @file json\n */\n\nimport JsonDiffPatcher from './JsonDiffPatcher';\n\n/**\n * Web Generator工具\n * templateA ------ patch1 ----------> page\n *     |            |                |\n *  patchA ----- transform -----> super patchA\n *    |            |                |\n * template -- super patch1----> expected page\n *\n * 根据page和patch求出保存page时的template版本[templateA]\n * 根据templateA和template求出patchA\n * 因为page和templateA同构，故对page直接进行patchA得到预期的页面\n *\n * @param template 当前最新版本的template\n * @param page 上一次保存的page\n * @param patch 上一次保存page时，page跟当时版本template的diff\n */\nconst patchPage = ({template, page, patch}) => {\n    const templateA = JsonDiffPatcher.unpatch(page, patch);\n    const patchA = JsonDiffPatcher.diff(templateA, template);\n    if (patchA) {\n        page = JsonDiffPatcher.patch(page, patchA);\n    }\n\n    return page;\n};\n\nexport default {\n    patchPage\n};\n","/**\n * @author zhangpeng\n * @date 16/7/25-下午3:35\n * @file main\n */\n\nimport JsonTool from './JsonTool/JsonTool';\n\nexport default {\n    JsonTool\n};\n"],"names":[],"mappings":";;;AAOA,sBAAe,cAAc,MAAd,CAAqB;cACpB,oBAAC,GAAD;WAAU,IAAI,EAAJ,IAAU,gBAAe,GAAf,CAApB;;CADD,CAAf;;ACCA;;;;;;;;;;;;;;;;AAgBA,IAAM,YAAY,SAAZ,SAAY,OAA6B;QAA3B,QAA2B,QAA3B,QAA2B;QAAjB,IAAiB,QAAjB,IAAiB;QAAX,KAAW,QAAX,KAAW;;QACrC,YAAY,gBAAgB,OAAhB,CAAwB,IAAxB,EAA8B,KAA9B,CAAlB;QACM,SAAS,gBAAgB,IAAhB,CAAqB,SAArB,EAAgC,QAAhC,CAAf;QACI,MAAJ,EAAY;eACD,gBAAgB,KAAhB,CAAsB,IAAtB,EAA4B,MAA5B,CAAP;;;WAGG,IAAP;CAPJ;;AAUA,eAAe;;CAAf;;AC1BA,WAAe;;CAAf;;"}